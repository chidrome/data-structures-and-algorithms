/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package linked_list;

import java.util.ArrayList;
import java.util.List;

public class Library {
    Node head;


    private static class Node{
        // value
        int value;

        Node next;

        // constructor
         private Node(int value, Node next){
            this.value = value;
            this.next = next;
        }
    }

    void insert(int value){
        Node newNode;

        if(head == null) {
            newNode = new Node(value, null);
            head = newNode;
        } else {
            newNode = new Node(value, head);
            head = newNode;
        }
    }

    boolean includes(int searchValue){
        Node current = head;

        while(current != null) {
            if(current.value == searchValue) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    List<Object> print() {
        List<Object> nodeList = new ArrayList<>();

        Node current = head;

        while (head != null) {
            nodeList.add(current.value);
        }

        return nodeList;
    }

    void append(int value) throws AssertionError{
        Node current = head;

        if(head == null){
            current = new Node(value, null);
            head = current;
        }
        else{
            current = head;

            while (current.next != null) {
                current = current.next;
            }
            Node newNode = new Node(value,  head);
            current.next = newNode;
        }
    }

    void insertBefore(int value, int newVal) throws NullPointerException{
        Node current = head;

        if(head.value == value ){
            head = new Node(newVal, null);
        }
        else{
            current = head;

            while(current.next.value != value){
                current = current.next;
            }
            Node newNode = new Node(newVal, head);
            newNode.next = current.next;
            current.next = newNode;
        }
    }

    void insertAfter(int value, int newValue) throws NullPointerException{
        Node current = head;

        while(current.value != value){
            current = current.next;
        }

        Node newNode = new Node(newValue, null);
        newNode.next = current.next;
        current.next = newNode;

        if(current.next ==  null){
            current = new Node(newValue, head);
        }
    }

}
